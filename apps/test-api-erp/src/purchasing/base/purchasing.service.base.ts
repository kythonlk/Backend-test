/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Purchasing as PrismaPurchasing,
  Inventory as PrismaInventory,
  User as PrismaUser,
} from "@prisma/client";

export class PurchasingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchasingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchasing.count(args);
  }

  async purchasings(
    args: Prisma.PurchasingFindManyArgs
  ): Promise<PrismaPurchasing[]> {
    return this.prisma.purchasing.findMany(args);
  }
  async purchasing(
    args: Prisma.PurchasingFindUniqueArgs
  ): Promise<PrismaPurchasing | null> {
    return this.prisma.purchasing.findUnique(args);
  }
  async createPurchasing(
    args: Prisma.PurchasingCreateArgs
  ): Promise<PrismaPurchasing> {
    return this.prisma.purchasing.create(args);
  }
  async updatePurchasing(
    args: Prisma.PurchasingUpdateArgs
  ): Promise<PrismaPurchasing> {
    return this.prisma.purchasing.update(args);
  }
  async deletePurchasing(
    args: Prisma.PurchasingDeleteArgs
  ): Promise<PrismaPurchasing> {
    return this.prisma.purchasing.delete(args);
  }

  async getInventory(parentId: string): Promise<PrismaInventory | null> {
    return this.prisma.purchasing
      .findUnique({
        where: { id: parentId },
      })
      .inventory();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.purchasing
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
