/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Inventory } from "./Inventory";
import { InventoryCountArgs } from "./InventoryCountArgs";
import { InventoryFindManyArgs } from "./InventoryFindManyArgs";
import { InventoryFindUniqueArgs } from "./InventoryFindUniqueArgs";
import { CreateInventoryArgs } from "./CreateInventoryArgs";
import { UpdateInventoryArgs } from "./UpdateInventoryArgs";
import { DeleteInventoryArgs } from "./DeleteInventoryArgs";
import { FinancialFindManyArgs } from "../../financial/base/FinancialFindManyArgs";
import { Financial } from "../../financial/base/Financial";
import { PurchasingFindManyArgs } from "../../purchasing/base/PurchasingFindManyArgs";
import { Purchasing } from "../../purchasing/base/Purchasing";
import { SalesFindManyArgs } from "../../sales/base/SalesFindManyArgs";
import { Sales } from "../../sales/base/Sales";
import { User } from "../../user/base/User";
import { InventoryService } from "../inventory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Inventory)
export class InventoryResolverBase {
  constructor(
    protected readonly service: InventoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "read",
    possession: "any",
  })
  async _inventoriesMeta(
    @graphql.Args() args: InventoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Inventory])
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "read",
    possession: "any",
  })
  async inventories(
    @graphql.Args() args: InventoryFindManyArgs
  ): Promise<Inventory[]> {
    return this.service.inventories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Inventory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "read",
    possession: "own",
  })
  async inventory(
    @graphql.Args() args: InventoryFindUniqueArgs
  ): Promise<Inventory | null> {
    const result = await this.service.inventory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Inventory)
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "create",
    possession: "any",
  })
  async createInventory(
    @graphql.Args() args: CreateInventoryArgs
  ): Promise<Inventory> {
    return await this.service.createInventory({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Inventory)
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "update",
    possession: "any",
  })
  async updateInventory(
    @graphql.Args() args: UpdateInventoryArgs
  ): Promise<Inventory | null> {
    try {
      return await this.service.updateInventory({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Inventory)
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "delete",
    possession: "any",
  })
  async deleteInventory(
    @graphql.Args() args: DeleteInventoryArgs
  ): Promise<Inventory | null> {
    try {
      return await this.service.deleteInventory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Financial], { name: "financials" })
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "read",
    possession: "any",
  })
  async findFinancials(
    @graphql.Parent() parent: Inventory,
    @graphql.Args() args: FinancialFindManyArgs
  ): Promise<Financial[]> {
    const results = await this.service.findFinancials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Purchasing], { name: "purchasings" })
  @nestAccessControl.UseRoles({
    resource: "Purchasing",
    action: "read",
    possession: "any",
  })
  async findPurchasings(
    @graphql.Parent() parent: Inventory,
    @graphql.Args() args: PurchasingFindManyArgs
  ): Promise<Purchasing[]> {
    const results = await this.service.findPurchasings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sales], { name: "salesItems" })
  @nestAccessControl.UseRoles({
    resource: "Sales",
    action: "read",
    possession: "any",
  })
  async findSalesItems(
    @graphql.Parent() parent: Inventory,
    @graphql.Args() args: SalesFindManyArgs
  ): Promise<Sales[]> {
    const results = await this.service.findSalesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Inventory): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
