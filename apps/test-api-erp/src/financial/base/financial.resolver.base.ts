/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Financial } from "./Financial";
import { FinancialCountArgs } from "./FinancialCountArgs";
import { FinancialFindManyArgs } from "./FinancialFindManyArgs";
import { FinancialFindUniqueArgs } from "./FinancialFindUniqueArgs";
import { CreateFinancialArgs } from "./CreateFinancialArgs";
import { UpdateFinancialArgs } from "./UpdateFinancialArgs";
import { DeleteFinancialArgs } from "./DeleteFinancialArgs";
import { Inventory } from "../../inventory/base/Inventory";
import { User } from "../../user/base/User";
import { FinancialService } from "../financial.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Financial)
export class FinancialResolverBase {
  constructor(
    protected readonly service: FinancialService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "read",
    possession: "any",
  })
  async _financialsMeta(
    @graphql.Args() args: FinancialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Financial])
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "read",
    possession: "any",
  })
  async financials(
    @graphql.Args() args: FinancialFindManyArgs
  ): Promise<Financial[]> {
    return this.service.financials(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Financial, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "read",
    possession: "own",
  })
  async financial(
    @graphql.Args() args: FinancialFindUniqueArgs
  ): Promise<Financial | null> {
    const result = await this.service.financial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Financial)
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "create",
    possession: "any",
  })
  async createFinancial(
    @graphql.Args() args: CreateFinancialArgs
  ): Promise<Financial> {
    return await this.service.createFinancial({
      ...args,
      data: {
        ...args.data,

        inventory: args.data.inventory
          ? {
              connect: args.data.inventory,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Financial)
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "update",
    possession: "any",
  })
  async updateFinancial(
    @graphql.Args() args: UpdateFinancialArgs
  ): Promise<Financial | null> {
    try {
      return await this.service.updateFinancial({
        ...args,
        data: {
          ...args.data,

          inventory: args.data.inventory
            ? {
                connect: args.data.inventory,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Financial)
  @nestAccessControl.UseRoles({
    resource: "Financial",
    action: "delete",
    possession: "any",
  })
  async deleteFinancial(
    @graphql.Args() args: DeleteFinancialArgs
  ): Promise<Financial | null> {
    try {
      return await this.service.deleteFinancial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Inventory, {
    nullable: true,
    name: "inventory",
  })
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "read",
    possession: "any",
  })
  async getInventory(
    @graphql.Parent() parent: Financial
  ): Promise<Inventory | null> {
    const result = await this.service.getInventory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Financial): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
