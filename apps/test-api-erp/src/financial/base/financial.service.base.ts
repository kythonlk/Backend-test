/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Financial as PrismaFinancial,
  Inventory as PrismaInventory,
  User as PrismaUser,
} from "@prisma/client";

export class FinancialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financial.count(args);
  }

  async financials(
    args: Prisma.FinancialFindManyArgs
  ): Promise<PrismaFinancial[]> {
    return this.prisma.financial.findMany(args);
  }
  async financial(
    args: Prisma.FinancialFindUniqueArgs
  ): Promise<PrismaFinancial | null> {
    return this.prisma.financial.findUnique(args);
  }
  async createFinancial(
    args: Prisma.FinancialCreateArgs
  ): Promise<PrismaFinancial> {
    return this.prisma.financial.create(args);
  }
  async updateFinancial(
    args: Prisma.FinancialUpdateArgs
  ): Promise<PrismaFinancial> {
    return this.prisma.financial.update(args);
  }
  async deleteFinancial(
    args: Prisma.FinancialDeleteArgs
  ): Promise<PrismaFinancial> {
    return this.prisma.financial.delete(args);
  }

  async getInventory(parentId: string): Promise<PrismaInventory | null> {
    return this.prisma.financial
      .findUnique({
        where: { id: parentId },
      })
      .inventory();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.financial
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
